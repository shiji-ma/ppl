{"version":3,"sources":["components/Exercise.js","components/Program.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Exercise","name","sets","reps","weight","className","Program","currentProgram","pushA","map","exercise","index","key","id","Navigation","useState","day","setDay","handleClick","event","daysCount","Object","keys","order","length","newDay","target","value","type","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ghCAaeA,EAXE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpC,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,iBAAiBJ,GAChC,yBAAKI,UAAU,iBAAiBH,GAChC,yBAAKG,UAAU,iBAAiBF,GAChC,yBAAKE,UAAU,mBAAmBD,KCezBE,EAnBC,WACd,IAAMC,EAAiBC,EACvB,OACE,6BACGD,EAAeE,KAAI,SAACC,EAAUC,GAC7B,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIF,EACJV,KAAMS,EAAST,KACfC,KAAMQ,EAASR,KACfC,KAAMO,EAASP,Y,cCkBZW,EA9BI,WAAO,IAAD,EACDC,mBAAS,GADR,mBAChBC,EADgB,KACXC,EADW,KAGjBC,EAAc,SAAAC,GAElB,IAAMC,EAAYC,OAAOC,KAAKC,GAAOC,OACjCC,EAAS,EACc,SAAvBN,EAAMO,OAAOC,MACFF,EAAL,IAART,EAAsBI,EAAuBJ,EAAM,EACnB,SAAvBG,EAAMO,OAAOC,QACDF,EAArBT,IAAQI,EAAsB,EAAeJ,EAAM,GAErDC,EAAOQ,IAGT,OACE,6BACE,4BAAQG,KAAK,SAAS3B,KAAK,OAAO0B,MAAM,OAAOE,QAASX,GAAxD,QAGA,4BACE,8CAEF,4BAAQU,KAAK,SAAS3B,KAAK,OAAO0B,MAAM,OAAOE,QAASX,GAAxD,UCPSY,MAdf,WACE,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,eAClB,6BACE,kBAAC,EAAD,OAEF,8BACE,kBAAC,EAAD,SCDY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ab5f56f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Exercise = ({ name, sets, reps, weight }) => {\r\n  return (\r\n    <div className=\"exercise\">\r\n      <div className=\"exercise-name\">{name}</div>\r\n      <div className=\"exercise-sets\">{sets}</div>\r\n      <div className=\"exercise-reps\">{reps}</div>\r\n      <div className=\"exercise-weight\">{weight}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exercise;\r\n","import React from \"react\";\r\nimport pushA from \"../programs/pushA.json\";\r\nimport Exercise from \"./Exercise\";\r\n\r\nconst Program = () => {\r\n  const currentProgram = pushA;\r\n  return (\r\n    <div>\r\n      {currentProgram.map((exercise, index) => {\r\n        return (\r\n          <Exercise\r\n            key={index}\r\n            id={index}\r\n            name={exercise.name}\r\n            sets={exercise.sets}\r\n            reps={exercise.reps}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Program;\r\n","import React, { useState } from \"react\";\r\nimport order from \"../programs/order.json\";\r\n\r\nconst Navigation = () => {\r\n  const [day, setDay] = useState(1);\r\n\r\n  const handleClick = event => {\r\n    // count number of days in routine, set state to new day\r\n    const daysCount = Object.keys(order).length;\r\n    let newDay = 0;\r\n    if (event.target.value === \"prev\") {\r\n      day === 1 ? (newDay = daysCount) : (newDay = day - 1);\r\n    } else if (event.target.value === \"next\") {\r\n      day === daysCount ? (newDay = 1) : (newDay = day + 1);\r\n    }\r\n    setDay(newDay);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" name=\"prev\" value=\"prev\" onClick={handleClick}>\r\n        Prev\r\n      </button>\r\n      <ul>\r\n        <h3>program title</h3>\r\n      </ul>\r\n      <button type=\"button\" name=\"next\" value=\"next\" onClick={handleClick}>\r\n        Next\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Program from \"./components/Program\";\nimport Navigation from \"./components/Navigation\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <nav>\n        <Navigation />\n      </nav>\n      <main>\n        <Program />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}